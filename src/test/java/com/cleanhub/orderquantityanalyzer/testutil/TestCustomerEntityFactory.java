package com.cleanhub.orderquantityanalyzer.testutil;

import com.cleanhub.orderquantityanalyzer.domain.customer.Customer;
import com.cleanhub.orderquantityanalyzer.infrastructure.repository.entity.CustomerEntity;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class TestCustomerEntityFactory {

    /**
     * @return List of 10 random CustomerEntitys generated by {@link #getCustomerEntity()}
     */
    public static List<CustomerEntity> getCustomerEntities() {
        return getCustomerEntities(10);
    }

    /**
     * @param count of CustomerEntitys to be returned
     * @return List of random CustomerEntitys using {@code count}, generated by {@link #getCustomerEntity()}
     */
    public static List<CustomerEntity> getCustomerEntities(int count) {
        return IntStream.range(0, count)
                .mapToObj(i -> getCustomerEntity())
                .toList();
    }

    /**
     * @return A CustomerEntity using random UUIDs for strings delegating to {@link #getCustomerEntity(String, String)}
     */
    public static CustomerEntity getCustomerEntity() {
        return getCustomerEntity(UUID.randomUUID().toString(), UUID.randomUUID().toString());
    }

    /**
     * @return A CustomerEntity from passed parameters
     */
    public static CustomerEntity getCustomerEntity(String companyName, String landingPageRoute) {
        return new CustomerEntity()
                .setCompanyName(companyName)
                .setLandingPageRoute(landingPageRoute);
    }

    /**
     * Delegates to {@link #fromCustomer(Customer)}
     *
     * @param customers to be converted to {@link CustomerEntity}
     * @return list of CustomerEntity all <b>without id</b> and properties from passed customers
     */
    public static List<CustomerEntity> fromCustomers(List<Customer> customers) {
        return customers.stream().map(TestCustomerEntityFactory::fromCustomer).toList();
    }

    /**
     * Delegates to {@link #fromCustomerWithId(Customer)}
     *
     * @param customers to be converted to {@link CustomerEntity}
     * @return list of CustomerEntity all with id and properties from passed customers
     */
    public static List<CustomerEntity> fromCustomersWithId(List<Customer> customers) {
        return customers.stream().map(TestCustomerEntityFactory::fromCustomerWithId).toList();
    }

    /**
     * @param customer to be converted to {@code  CustomerEntity}
     * @return new {@link CustomerEntity} with the properties from {@code customer} and random UUID as {@code id}
     */
    public static CustomerEntity fromCustomerWithId(Customer customer) {
        return fromCustomerWithId(customer, UUID.randomUUID());
    }

    /**
     * @param customer to be converted to {@code  CustomerEntity}
     * @param id       to be used as {@code customerEntity.id}
     * @return new {@link CustomerEntity} with the properties from {@code customer} and passed {@code id}
     */
    public static CustomerEntity fromCustomerWithId(Customer customer, UUID id) {
        return fromCustomer(customer)
                .setId(id);
    }

    /**
     * @param customer to be converted to {@code  CustomerEntity}
     * @return new {@link CustomerEntity} with the properties from {@code customer}
     */
    public static CustomerEntity fromCustomer(Customer customer) {
        return new CustomerEntity()
                .setCompanyName(customer.companyName())
                .setLandingPageRoute(customer.landingPageRoute());
    }

}
